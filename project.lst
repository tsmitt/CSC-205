     Assembly listing for: project.mas
                Assembled: Thu Jun 06 19:24:53 EDT 2019

         |                                / Trevor Smith, CSC 205 - 002M, Professor Hui
         |                                / Parity Checker for the ASCII system.
         |                                
000 5000 |  start     INPUT               / Directs the user for input that they deem appropriate. In this case ASCII values such as "!" or "a".
001 2051 |            STORE X             / Stores a value given by the user as an ASCII value.
002 6000 |            OUTPUT              / For efficiency, the value is outputed as it's decimal immediately. For "!" this is 33.  
         |                                
003 1051 |  for       LOAD X              / This is the required loop, which cycles through the binary value of the input, searching for
004 1051 |  check6    LOAD X              / The 6th bit will be checked. A one that may be detected will be logged. 
005 4049 |            SUBT bit6           / DEC 64 is subtracted (01000000 in binary) to give us a value we can store as the difference. 
006 2050 |            STORE diff          / Should X < 2^6 the value will be one and stored as such. This is stored in this command.
007 8000 |            SKIPCOND 000        / Skipcond will take our diff value and evaluate. If AC < 0 the next instruction will be skipped
008 0034 |            JNS update          / We "Jump & Store" to the update subroutine to load and save our difference, 
         |                                
009 1051 |  Check5    LOAD X              / The prior process is repeated. 
00A 404A |            SUBT bit5           / This time DEC 32 (00100000 in binary) will be checked. 
00B 2050 |            STORE diff          / The difference is stored and the process continues.
00C 8000 |            SKIPCOND 000        / AC < 0 is checked again.
00D 0034 |            JNS update          / This command sees to it that the program moves its way down to the update routine 
         |                                				     
00E 1051 |  check4    LOAD X               
00F 404B |            SUBT bit4           / The process of checking is repeated another five times until it is complete.
010 2050 |            STORE diff          / While this is happening, the routines are calling the "update" routine, as well
011 8000 |            SKIPCOND 000        / as the "totaling" routine nested within that routine too. 
012 0034 |            JNS update           
         |                                
013 1051 |  check3    LOAD X               
014 404C |            SUBT bit3            
015 2050 |            STORE diff           
016 8000 |            SKIPCOND 000         
017 0034 |            JNS update           
         |                                
018 1051 |  check2    LOAD X              / With each check, the subtracted bit is one binary bit less than the previous check. 
019 404D |            SUBT bit2           / This is to ensure that as the input is checked, each binary position is accounted for 
01A 2050 |            STORE diff          / and tallied up along with the others.
01B 8000 |            SKIPCOND 000         
01C 0034 |            JNS update           
         |                                
01D 1051 |  check1    LOAD X               
01E 404E |            SUBT bit1            
01F 2050 |            STORE diff           
020 8000 |            SKIPCOND 000         
021 0034 |            JNS update           
         |                                
022 1051 |  check0    LOAD X               
023 404F |            SUBT bit0            
024 2050 |            STORE diff           
025 8000 |            SKIPCOND 000         
026 0034 |            JNS update           
027 9029 |            JUMP end             
028 7000 |  endfor    HALT                / For loop ends here, effectively halting the program.
         |                                
029 1053 |  end       LOAD totalOnes      / totalOnes is loaded for the purpose of outputting it in the next instruction
02A 6000 |            OUTPUT              / The instruction indicates that it should be displayed as the number of 1's in the binary representation
         |                                			
02B 1053 |            LOAD totalOnes      / totalOnes is loaded and set to zero again so that when the program is restarted, as we jump to the start, 
02C 4053 |            SUBT totalOnes      / no errors or false reporting of values as ones in a binary representation occur. 
02D 2053 |            STORE totalOnes     / The value is returned to zero to begin again. 
         |                                			
         |                                
02E 1055 |            LOAD p              / Here the value of the partial is loaded to be outputed.
02F 6000 |            OUTPUT              / The command following the load instruction outputs the partial value.
         |                                
030 1055 |            LOAD p              / Just as above in regard to the totalOnes value, the value of each partial is
031 4055 |            SUBT p              / restored each time the coded is halted and started up again. To do this we must
032 2055 |            STORE p             / subtract it from itself and store it to return it to its intial condition.
         |                                			
033 9000 |            JUMP start          / Returns us to "start" to complete the program. END of program.
         |                                		
         |                                
         |                                			
         |                                	/ update routine will be invoked in every checking routine to store the diff for each check, and increment the count
034 0000 |  update    HEX 0                
035 1050 |            LOAD diff           / Save diff in place of X
036 2051 |            STORE X             / Store diff where X is
037 0043 |            JNS totaling        / Jump & Store to the "totaling" routine. This helped me clean up my code. 
         |                                					     / The method itself is listed below, and determines the value of the totalOnes variable.
038 1055 |  IF        LOAD p              / The if statement loads the partial, this is a check to make sure the process is working.
039 8400 |            SKIPCOND 400        / It may in fact be useless to the design of the program but I didn'y want to jeopardize the output of my code.	
03A 903D |            JUMP ELSE           / In the previous instruction we skipped the else clause if the partial was equal to zero. 
03B 1054 |            LOAD one            / A value of one is loaded, this is later stored as the partial. Without it the partial would be zero.
03C 9040 |            JUMP end_if         / The if statement has been worked through, and we jump to the end of the statement.	
         |                                			
03D A000 |  ELSE      CLEAR               / If the partial was previously equal to anything other than zero, we clear the values of the AC 
         |                                			       	      / This shold not truly be needed as the partial will always equal zero before it equals one in the statement.
03E 2055 |            STORE p             / Partial value is stored and the else clause can be exited via the next instruction.
03F 9040 |            JUMP end_if         / The else clause is jumped from, and we return to the rest of the update subroutine.
         |                                
040 2055 |  end_if    STORE p             / Just as the partial is saved from the if statement, it is saved should it take the else clause route.
         |                                				
         |                                			
041 A000 |            CLEAR               / Fills the AC with zeros
042 C034 |            JUMPI update        / Ends subroutine and returns us to checking sequence until the program can jump to the end.  
         |                                	
         |                                	/ The use of this method helped me seperate the algorithm which would determine the amount of 1's in each ASCII value. 
043 0000 |  totaling  HEX 0               / This is a seperate subrountine for calculating the total of 1's in each binary representation
044 1053 |            LOAD totalOnes      / First I loaded the value. 
045 3054 |            ADD one             / A value of one is added to it, each evaluation of the total of 1's was either short one or incorrect
046 2053 |            STORE totalOnes     / due to the checking routines above. 
047 A000 |            CLEAR               / The routine is cleared or any values in the accumulator.
048 C043 |            JUMPI totaling      / End of totaling routine.
         |                                
         |                                / Bits used in the check routines that determined the difference
         |                                / and helped identify where 1's may have been located. 
049 0040 |  bit6      DEC 64              / In binary: 01000000
04A 0020 |  bit5      DEC 32              / In binary: 00100000
04B 0010 |  bit4      DEC 16              / In binary: 00010000
04C 0008 |  bit3      DEC 8               / In binary: 00001000
04D 0004 |  bit2      DEC 4               / In binary: 00000100
04E 0002 |  bit1      DEC 2               / In binary: 00000010
04F 0001 |  bit0      DEC 1               / In binary: 00000001
         |                                
050 0001 |  diff      DEC 1               / The difference between the input and the binary representation
051 0000 |  X         HEX 0               / Used to as the user input throughout the program
052 0000 |  count     DEC 0               / Used to increment when necessary and 
053 0000 |  totalOnes DEC 0               / The total of 1's counted in each binary representation presented to the program.
054 0001 |  one       DEC 1               / At times it was necessary to involve a one, but not necessarily to increment a count of any kind. 
055 0000 |  p         DEC 0               / Value of partial, originally set to zero until later manipulation. 

Assembly successful.

         SYMBOL TABLE
         -----------------------------------------------------
          Symbol    | Defined | References 
         -----------+---------+-------------------------------
          Check5    |   009   | 
          ELSE      |   03D   | 03A
          IF        |   038   | 
          X         |   051   | 001, 003, 004, 009, 00E, 013, 
                    |         | 018, 01D, 022, 036
          bit0      |   04F   | 023
          bit1      |   04E   | 01E
          bit2      |   04D   | 019
          bit3      |   04C   | 014
          bit4      |   04B   | 00F
          bit5      |   04A   | 00A
          bit6      |   049   | 005
          check0    |   022   | 
          check1    |   01D   | 
          check2    |   018   | 
          check3    |   013   | 
          check4    |   00E   | 
          check6    |   004   | 
          count     |   052   | 
          diff      |   050   | 006, 00B, 010, 015, 01A, 01F, 
                    |         | 024, 035
          end       |   029   | 027
          end_if    |   040   | 03C, 03F
          endfor    |   028   | 
          for       |   003   | 
          one       |   054   | 03B, 045
          p         |   055   | 02E, 030, 031, 032, 038, 03E, 
                    |         | 040
          start     |   000   | 033
          totalOnes |   053   | 029, 02B, 02C, 02D, 044, 046
          totaling  |   043   | 037, 048
          update    |   034   | 008, 00D, 012, 017, 01C, 021, 
                    |         | 026, 042
         -----------------------------------------------------

